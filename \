from flask import Flask, g , url_for ,render_template, request, redirect, flash
import mariadb
import datetime
from werkzeug.security import check_password_hash, generate_password_hash
from flask_login import LoginManager
from flask_sqlalchemy import SQLAlchemy


from . import models
from . import forms
from . import schema

db = SQLAlchemy()

def create_app(test_config=None):
    app = Flask(__name__, instance_relative_config = True)
    app.config.from_pyfile('config.py')

    # Iniciar configuracion de base de datos
    db.init_app(app)
    with app.app_context():
        db.create_all()
    """
    Gestionar los usuarios
    """
    login_manager=LoginManager(app)

    @login_manager.user_loader
    def load_user(user_id):
        for user in models.users:
            if user.id == int(user_id):
                return user
            return None


    ###############
    ###  Rutas  ###
    ###############

    @app.route('/', methods=['GET','POST'])
    def index():
        form = forms.posit()
        if form.validate_on_submit():
            title = form.title.data
        
        #datos=posits
        # Buscar una mejor manera de cerrar la conexion con la base de datos
        return render_template('index.html',form=form)
    """
    @app.route('/signin',methods=['POST','GET'])
    def signin():
        if request.method == 'POST':
            user = request.form['user']
            password = generate_password_hash(request.form['password'])
            db.search_user(user,password)
        return render_template('signin.html')

    @app.route('/login', methods=['POST','GET'])
    def login():
        form = forms.log_form()
        if request.method == 'POST':
            user = request.form['user']
            password = generate_password_hash(request.form['password'])
            print(user , password)

        return render_template('login.html',form=form)

    @app.route('/new_posit', methods=['GET','POST'])
    def new_posit():
        form = forms.posit()
        date = datetime.date.today()
        if request.method == 'POST':
            db.inser_posit( form.title.data, form.body.data, date, form.category.data, form.color.data)
            flash("Nota creada exitosamente","success")
            return redirect(url_for('index'))
        return redirect(url_for('index'))

    @app.route('/posit_edit/<id>', methods=['GET','POST'])
    def posit_edit(id):
        if request.method == 'GET':
            datos = db.get_especific_post(id)
            form = forms.posit()
            form.title.data , form.body.data = datos[1] , datos[2]
            form.category.process_data(datos[4])
            form.color.process_data(datos[5])
            return render_template('posit_edit.html',datos=datos, form=form)
        if request.method == 'POST':
            if form.validate_on_submit():
                date = datetime.date.today()
                db.update_posit([id,form.title.data, form.body.data, date, form.category.data, form.color.data])
                flash("Nota actualizada exitosamente","success")
                return redirect(url_for('index'))
            return render_template('posit_edit.html',datos=datos, form=form)

    @app.route('/delete_posit/<id>')
    def delete_posit(id):
        db.delete_post(id)
        flash("Nota eliminada exitosamente","success")
        return redirect(url_for('index'))
    """

    return app
